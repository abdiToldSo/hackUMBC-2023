# -*- coding: utf-8 -*-
"""hackUMBC 2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x3gCx3iYWpyqxsBfz8DC5jY62x4o4KCw
"""

# ! pip install -q kaggle

import numpy as np # linear algebra
import pandas as pd # data processing
from google.colab import files
from google.colab import drive
from collections import Counter


# Input data files are available in the "../input/" directory.
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

drive.mount('/content/drive')

df = pd.read_csv('/netflix_titles.csv')
df2 = pd.read_csv('/best_movies_netflix.csv')
pd.set_option("display.max_colwidth", None)

pip show pandas

df.tail()

# Remove all media that are are NOT movies or have NO director
df = df.query('type == "Movie"')
df = df.dropna()
df.head()

#Initialize User Values
user1 = user2 = user3 = user4 = user5 = []

"""<h1><b>Goal</b></h1>
<h3>1. Take an input list of movies</h3>
<h3>2. Parse through table and find movies that have the same values (and / or) </h3>
<h3>3. Output list of movies that has be parsed </h3>


"""

'''
NECESSARY FUNCTIONS:
concatLists() = Concatenates all the users lists together !DONE!

Need to Do:
findCommons() = Finds common tags between all the movies inputed


final_movies = [Final list of movie reccomendations]
'''


#user1 = st.multiselect('What Movies', )
#movie_list = df.loc[:,'title'].values.toList()
movie_list = df["title"].values.tolist()
movie_list[2]

#ABDI'S CODEBLOCK
#Dummy Code
#test = [
  #"Good People",
  #"Stonehearst Asylum",
  #"Love",
  #"ATM",
  #"Def Comedy Jam 25"
#]

test = [
  "Norm of the North: King Sized Adventure",
  "Spider-Man: Into the Spider-Verse",
  "The End of Evangelion",
  "EVANGELION: DEATH (TRUE)²"
]

x = "Good People"
#Initialize Empty List & Dataframe
testdf = pd.DataFrame()
testH = []
common_genre = []
#Append empty testdf with inputted values
for i in test:
  testdf = testdf.append(df.query('title == @i'))

#Converts dataframe to list with
testG = testdf["title"].values.tolist()

#Convert 2D list into 1D List
for i in range(len(testG)):
  testH.append(testG[i].split(", "))
final_genres = [i for sublist in testH for i in sublist]

#Finds 5 Most Common Genres
for i in range(5):
  x = max(final_genres, key=final_genres.count)
  common_genre.append(x)
  final_genres.remove(x)

#common_genre
final_genres

#Parse df movies with final_genres list
genre_df = pd.DataFrame()

for i in final_genres:
  #df = df.query('"@i" is in listed_in')
  print('hello')

genre_df.append(df.query("listed_in == @final_genres"))

#Minimum: randommized 5 results
#Goal: add score rating to dataframe, then
#First Step: Find overlap with other dataframe

#df2.head()

#test_df = pd.DataFrame()
#for i in df2:
    #test_df.append(df2.query("title == "))
df = df.sample(frac = 1)
#df1 = pd.DataFrame()
#df1['TEST'] = np.where(df['title'] == df1['TITLE'],'True','False')
genre_df.head()
df.head()

#Convert df to dict
df_dict = df.head().to_dict()

df_dict['show_id']
df_dict['title']
df_dict['title']

ndf = pd.read_excel('/Netflix_Dataset_Latest_2021.xlsx')

ndf['Title']

test_dict = {}
test_dict1 = {}
for i in ndf['Title'].head():
  test_dict[i] = ndf.query('Title == @i')
  test_dict1[i] = [test_dict[i]['IMDb Score']]
  test_dict1[i].append([test_dict[i]['Metacritic Score']])
  test_dict1[i].append([test_dict[i]['Rotten Tomatoes Score']])
  test_dict1[i].append([test_dict[i]['Hidden Gem Score']])
test_dict1['Lets Fight Ghost']

test_movies = [
  "Norm of the North: King Sized Adventure",
  "Spider-Man: Into the Spider-Verse",
  "The End of Evangelion",
  "EVANGELION: DEATH (TRUE)²"
]

def common_genres(data):
  #Initialize Empty List & Dataframe
  testdf = pd.DataFrame()
  testH = []
  common_genre = []
  #Append empty testdf with inputted values
  for i in data:
    testdf = testdf.append(df.query('title == @i'))

  #Converts dataframe to list with
  testG = testdf["listed_in"].values.tolist()

  #Convert 2D list into 1D List
  for i in range(len(testG)):
    testH.append(testG[i].split(", "))
    final_genres = [i for sublist in testH for i in sublist]

  #Finds 5 Most Common Genres
  for i in range(5):
    x = max(final_genres, key=final_genres.count)
    common_genre.append(x)
    final_genres.remove(x)

  return final_genres

common_genres(test_movies)

def find_movies():
  global df
  #Parse df movies with final_genres list
  genre_df = pd.DataFrame()

  for i in final_genres:
    #df = df.query('"@i" is in listed_in')
    print('hello')

  genre_df.append(df.query("listed_in == @final_genres"))

  #Minimum: randommized 5 results
  #Goal: add score rating to dataframe, then
  #First Step: Find overlap with other dataframe

  #df2.head()

  #test_df = pd.DataFrame()
  #for i in df2:
      #test_df.append(df2.query("title == "))
  genre_df = df.sample(frac = 1)
  #df1 = pd.DataFrame()
  #df1['TEST'] = np.where(df['title'] == df1['TITLE'],'True','False')
  genre_df.head()

  return genre_df.head()

find_movies()

def final_movies():
  #Final Dictionary of Movies
  #Initialize Variables
  movie1 = movie2 = movie3 = movie4 = movie5 = {}

  movie1 = {
      'title': df.iloc[0].values[2],
      'audience': df.iloc[0].values[8],
      'genre': df.iloc[0].values[10],
      'description': df.iloc[0].values[11]
  }

  movie2 = {
      'title': df.iloc[1].values[2],
      'audience': df.iloc[1].values[8],
      'genre': df.iloc[1].values[10],
      'description': df.iloc[1].values[11]
  }

  movie3 = {
      'title': df.iloc[2].values[2],
      'audience': df.iloc[2].values[8],
      'genre': df.iloc[2].values[10],
      'description': df.iloc[2].values[11]
  }

  movie4 = {
      'title': df.iloc[3].values[2],
      'audience': df.iloc[3].values[8],
      'genre': df.iloc[3].values[10],
      'description': df.iloc[3].values[11]
  }

  movie5 = {
      'title': df.iloc[4].values[2],
      'audience': df.iloc[4].values[8],
      'genre': df.iloc[4].values[10],
      'description': df.iloc[4].values[11]
  }


  #TITLE
  #df.iloc[1].values[2]

  #AUDIENCE
  #df.iloc[1].values[8]

  #GENRE
  #df.iloc[1].values[10]

  #DESCRIPTION
  #df.iloc[1].values[11]
movie5